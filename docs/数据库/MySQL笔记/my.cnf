[mysqld]
# -------------------------------------------------------------------
# MySQL基础配置
# -------------------------------------------------------------------
# Unix Domain Socket
socket=/tmp/mysql.sock
# 端口
port=3306
# MySQL事件执行器，如果使用了events定时任务，才需要开启
#event_scheduler=ON
# 关闭反向DNS，权限需要使用IP而不是主机名定义(包括localhost)
#skip_name_resolve
# 最大允许包大小，默认4M，一般够用，根据需要设置
#max_allowed_packet=4M
# 最大等待连接数，默认无限(-1)，MySQL文档建议设置为(max_connections / 5 + 50)
back_log=80
# SQL模式，启用严格模式
sql_mode=STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ENGINE_SUBSTITUTION
# 只读模式，启用的话，只有SUPER权限用户才能修改数据库，Slave建议开启
#read_only
# 小写表名，忽略大小写
lower_case_table_names

# -------------------------------------------------------------------
# MySQL字符集和字符排序配置
# -------------------------------------------------------------------
character_set_server=utf8

# -------------------------------------------------------------------
# MySQL连接和线程配置
# -------------------------------------------------------------------
# 最大连接数, 注意要修改一下/etc/security/limit.conf增加系统限制
max_connections=151
# 最大连接错误数，超过此数目，客户端(IP,HOST)会被拒绝连接（可show hosts重置计数）
max_connect_errors=1024
# 连接超时（秒），默认10，如果在稳定内网可适当降低此值
connect_timeout=10
# 线程池大小，默认无限制，MySQL文档建议按MySQL规划内存，每1G增加8个单位线程池大小
thread_cache_size=16
# 长连接空闲时间（秒），默认8小时（28800），可以考虑根据应用连接池设置适当降低此值以加快空闲资源回收
# 极不建议以线程池连接被主动断开为理由增大此值（应由线程池主动实现连接断开检测）
wait_timeout=28800

# -------------------------------------------------------------------
# MySQL查询缓存配置
# -------------------------------------------------------------------
# MySQL查询缓存对于不常变化的数据，有助于提升性能，但对于经常变化的数据，查询缓存则没有必要
# 查询缓存和事务环境下，会有额外的锁开销（事务会对查询缓存加锁）
# 综上所述，在InnoDB引擎的OLTP应用上，建议禁用查询缓存，具体情况根据应用设定来进行
# 查询缓存大小
query_cache_size=1M
# 查询缓存类型：0禁用；1除非标记SQL_NO_CACHE，否则使用查询缓存；2除非标记SQL_CACHE，否则不使用缓存
query_cache_type=0
# 查询缓存支持的最大结果集，超过此大小，不进行缓存
query_cache_limit=1M

# -------------------------------------------------------------------
# MySQL内存表配置
# -------------------------------------------------------------------
# 内存表在很多PHP应用中用于保存服务器session，此时可能需要适当增加
# 默认值都是16M，在服务器内存允许的情况下，可以增大到128M（使用内存临时表和持久化临时表性能差异巨大）
# 内存表大小限制
max_heap_table_size=16M
# 内存临时表大小限制，超过此大小将使用持久化临时表（默认为InnoDB引擎）。这个参数也受max_heap_table_size的限制
tmp_table_size=16M

# -------------------------------------------------------------------
# MySQL其他缓存和缓冲配置
# -------------------------------------------------------------------
# 允许的同时打开表数目，只要保证比服务器上的表数多即可（打开表的文件句柄受操作系统限制），这个缓存主要保存表定义文件的操作句柄
table_open_cache=2000
# 打开表缓存实例数，执行DDL语句时，会对表所在的缓存实例加锁
# 如果服务器核数大于16，可以适当增加到8~16
table_open_cache_instances=1
# 依次为排序，JOIN，MRR优化，内存页扫描所使用的缓冲区大小
# 如果服务器内存够用，可适当增加到2M
# 注意这四个缓冲区是会话级别的，不宜过大
sort_buffer_size=256K
join_buffer_size=256K
read_rnd_buffer_size=256K
read_buffer_size=128K

# -------------------------------------------------------------------
# MySQL基本日志配置
# -------------------------------------------------------------------
# 通用查询日志，建议生产环境关闭
# 会记录MySQL接收到的所有请求（包括错误的连接请求等）
#general_log

# -------------------------------------------------------------------
# MySQL慢查询日志配置
# -------------------------------------------------------------------
# 启动慢查询日志
slow_query_log
# 慢查询时间（秒），默认10，互联网应用考虑为2
long_query_time=2
# 日志未使用索引的查询
log_queries_not_using_indexes
# 限制每分钟日志未使用索引的查询数目，默认无限制（0）
log_throttle_queries_not_using_indexes=10

# -------------------------------------------------------------------
# MySQL二进制日志配置
# -------------------------------------------------------------------
# 服务器ID，主从集群结构中，各服务器的id不能重复
server_id=1
# 启用二进制日志
log_bin
# 二进制日志格式，分为STATEMENT（记录语句），ROW（记录行变化）和MIXED（混合模式）
# 使用STATEMENT方式在使用一些非幂等操作时可能照成binlog和实际数据不符的情况
binlog_format=ROW
# 产生二进制日志后是否立即调用sync，启用会严重影响IO性能，但从安全考虑，生产环境需要启用
sync_binlog=0
# Slave是否将复制到的语句进行二进制日志，一般不需要启用，除非属于多层复制的中间节点
#log_slave_updates=ON
# 历史binlog保留天数，建议7天，默认一直保留（0）
expire_logs_days=7
# 在启动binlog后，函数和过程需要对自身行为进行声明（DETERMINISTIC幂等（对固定输入只产生固定结果）, NO SQL（无SQL）, READS SQL DATA（只有读SQL））
# 否则函数或过程创建失败
# 启用此特性后，函数和过程无需声明，但管理员需自行保证函数和过程应为幂等操作
#log_bin_trust_function_creators=ON

# -------------------------------------------------------------------
# MySQL其他相关
# -------------------------------------------------------------------
# 允许函数和过程的递归调用深度，默认为不允许递归（0），根据情况设置
#max_sp_recursion_depth=10
# 一个可更新视图必须根据主键或自增字段进行，或带有limit语句；这个参数控制违反此要求的行为：1警告，但继续执行；0报错
updatable_views_with_limit=0
# 启用安全更新模式，启用后update和delete语句只能使用主键，唯一索引或limit语句才能进行
#sql_safe_updates
# 跳过mysql认证机制，一般是用于忘记root密码恢复的情况
#skip_secure_auth

# -------------------------------------------------------------------
# MyISAM配置
# -------------------------------------------------------------------
# MyISAM表引擎当前很少使用，如果没有使用，可以跳过这部分
# MyISAM的数据部分是由操作系统缓存，在分配MySQL内存的时候需要对此进行考虑
# MySQL层面主要是对Key Buffer的优化
# Key Buffer大小
#key_buffer_size=8M

# -------------------------------------------------------------------
# InnoDB引擎线程相关
# -------------------------------------------------------------------
# InnoDB读、写、Purge线程数，按CPU数调整
innodb_read_io_threads=4
innodb_write_io_threads=4
innodb_purge_threads=1
# InnoDB IO指标，默认200。他决定了主线程每次变更缓存合并和脏页刷新量，一般默认，SSD等高速硬盘可以适当增加最大到2000
innodb_io_capacity=200
# InnoDB并发凭证数，包括了InnoDB后台线程和用户线程数，一般比max_connections大即可
innodb_concurrency_tickets=5000

# -------------------------------------------------------------------
# InnoDB事务与锁相关
# -------------------------------------------------------------------
# InnoDB锁等待超时（秒）
innodb_lock_wait_timeout=50
# 是否在错误日志中输出死锁检测结果
#innodb_print_all_deadlocks
# 事务等待超时后是否标记事务回滚，默认OFF，为事务完整性建议启用
innodb_rollback_on_timeout=ON
# 启用XA事务支持，即使不用分布式事务，只要开启了binlog，也需要启用此特性以保持InnoDB事务与binlog的一致
innodb_support_xa

# -------------------------------------------------------------------
# InnoDB引擎缓存和日志相关
# -------------------------------------------------------------------
# InnoDB Buffer，重要优化，在只使用InnoDB的情况，建议将MySQL 70%~80%的空间分配给此空间
innodb_buffer_pool_size=1536M
# 邻页刷新机制，默认开启，在SSD这类高IOPS磁盘可以禁用
#innodb_flush_neighbors=0
# 两次写机制，默认开启，防止在写入过程异常造成文件损坏。如果文件系统有考虑此问题，可以禁用
#innodb_doublewrite=OFF
# 磁盘页校验算法，如果不考虑向前兼容，strict_crc32性能最好
innodb_checksum_algorithm=strict_crc32
# InnoDB行格式，一般默认Antelope即可，如果需要压缩格式支持，则需要设置为Barracuda
#innodb_file_format=Barracuda
# Redo日志文件大小，如果服务器内存祝偶，可以增加到256M
innodb_log_file_size=50M
# 文件底层打开和写入方式，一般默认的fsync即可，如果采用RAID阵列Write Back特性，可以使用O_DIRECT
innodb_flush_method=fsync

